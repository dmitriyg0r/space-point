import bcrypt from 'bcrypt';
import pool from '../config/database.js';
import { generateUsername } from '../utils/generateUsername.js';

export async function register(req, res) {
  const { name, email, password, user_avatar, profile_info } = req.body;

  if (!name || !email || !password) {
    return res.status(400).json({ success: false, message: '–ò–º—è, email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(email)) {
    return res.status(400).json({ success: false, message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' });
  }

  if (password.length < 6) {
    return res.status(400).json({ success: false, message: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤' });
  }

  try {
    let username = generateUsername(name);

    let usernameExists = true;
    let attempts = 0;
    while (usernameExists && attempts < 10) {
      const existingUsername = await pool.query(`
                SELECT id FROM users WHERE username = $1
            `, [username]);

      if (existingUsername.rows.length === 0) {
        usernameExists = false;
      } else {
        username = generateUsername(name);
        attempts++;
      }
    }

    const existingUser = await pool.query(`
            SELECT id FROM users 
            WHERE email = $1
        `, [email]);

    if (existingUser.rows.length > 0) {
      return res.status(409).json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    const saltRounds = 10;
    const password_hash = await bcrypt.hash(password, saltRounds);

    const result = await pool.query(`
            INSERT INTO users (name, username, email, password_hash, user_avatar, profile_info, is_online, role)
            VALUES ($1, $2, $3, $4, $5, $6, false, 'user')
            RETURNING 
                id,
                name,
                username,
                email,
                user_avatar,
                profile_info,
                is_online,
                role,
                created_at
        `, [name, username, email, password_hash, user_avatar || null, profile_info || null]);

    const newUser = result.rows[0];

    res.status(201).json({
      success: true,
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
      user: {
        id: newUser.id,
        name: newUser.name,
        username: newUser.username,
        email: newUser.email,
        user_avatar: newUser.user_avatar,
        profile_info: newUser.profile_info,
        role: newUser.role,
        created_at: newUser.created_at
      }
    });
  } catch (error) {
    // eslint-disable-next-line no-console
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    if (error.code === '23505') {
      return res.status(409).json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }
    res.status(500).json({ success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
  }
}

export async function login(req, res) {
  // eslint-disable-next-line no-console
  console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É');
  const { login, password } = req.body;

  if (!login || !password) {
    return res.status(400).json({ success: false, message: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  try {
    const userResult = await pool.query(`
            SELECT 
                id,
                name,
                username,
                email,
                password_hash,
                user_avatar,
                profile_info,
                is_online,
                role,
                created_at
            FROM users 
            WHERE username = $1 OR email = $1
        `, [login]);

    if (userResult.rows.length === 0) {
      return res.status(401).json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }

    const user = userResult.rows[0];
    const passwordMatch = await bcrypt.compare(password, user.password_hash);
    if (!passwordMatch) {
      return res.status(401).json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }

    await pool.query(`
            UPDATE users 
            SET is_online = true, lastlogin_at = CURRENT_TIMESTAMP
            WHERE id = $1
        `, [user.id]);

    res.json({
      success: true,
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É',
      user: {
        id: user.id,
        name: user.name,
        username: user.username,
        email: user.email,
        user_avatar: user.user_avatar,
        profile_info: user.profile_info,
        role: user.role,
        is_online: true,
        created_at: user.created_at
      }
    });
  } catch (error) {
    // eslint-disable-next-line no-console
    console.error('üí• –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:', error);
    res.status(500).json({ success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ' });
  }
}


