import './Regcont.css';
import logoImage from '../assets/logo.png';
import { useState } from 'react';
import axios from 'axios';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
const API_BASE_URL = 'http://localhost:3001/api';

function Regcont(props) {
  console.log('Regcont –ø–æ–ª—É—á–∏–ª props:', props);
  const { onLogin } = props;
  console.log('Regcont –ø–æ–ª—É—á–∏–ª onLogin:', typeof onLogin, onLogin);
  
  const [isRegisterModalOpen, setIsRegisterModalOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  
  const [loginData, setLoginData] = useState({
    login: '',
    password: '',
  });
  const [registerData, setRegisterData] = useState({
    name: '',
    email: '',
    password: '',
    confirmPassword: '',
  });

  const handleRegisterClick = () => {
    setIsRegisterModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsRegisterModalOpen(false);
    setError('');
    setSuccess('');
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    setRegisterData({
      name: '',
      email: '',
      password: '',
      confirmPassword: '',
    });
  };

  const handleLoginInputChange = (e) => {
    const { name, value } = e.target;
    setLoginData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleLoginSubmit = async (e) => {
    e.preventDefault();
    setError('');
    
    if (!loginData.login || !loginData.password) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
      return;
    }

    setIsLoading(true);

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥
      const response = await axios.post(`${API_BASE_URL}/auth/login`, {
        login: loginData.login,
        password: loginData.password
      }, {
        headers: {
          'Content-Type': 'application/json',
        },
        timeout: 10000
      });

      if (response.data.success) {
        // –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –≤—Ö–æ–¥–∞
        console.group('üîê –í–•–û–î –í –°–ò–°–¢–ï–ú–£');
        console.log('üìÖ –í—Ä–µ–º—è –≤—Ö–æ–¥–∞:', new Date().toLocaleString('ru-RU'));
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', response.data.user.name);
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å:', '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥');
        console.log('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å,', response.data.user.name + '!');
        console.groupEnd();

        // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤—Ö–æ–¥–∞ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Ö–æ–¥–∞...');
        console.log('onLogin type:', typeof onLogin);
        console.log('window.handleGlobalLogin type:', typeof window.handleGlobalLogin);
        
        if (typeof onLogin === 'function') {
          console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º onLogin –∏–∑ –ø—Ä–æ–ø—Å–æ–≤');
          onLogin(response.data.user);
        } else if (typeof window.handleGlobalLogin === 'function') {
          console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤—Ö–æ–¥–∞');
          window.handleGlobalLogin(response.data.user);
        } else {
          console.error('‚ùå –ù–∏ –æ–¥–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞');
          console.error('onLogin:', onLogin);
          console.error('–í—Å–µ –ø—Ä–æ–ø—Å—ã:', props);
          // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
          console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
          localStorage.setItem('currentUser', JSON.stringify(response.data.user));
          window.location.reload();
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
      
      if (error.response?.data?.message) {
        setError(error.response.data.message);
      } else if (error.code === 'ECONNREFUSED') {
        setError('–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.');
      } else {
        setError('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleRegisterInputChange = (e) => {
    const { name, value } = e.target;
    setRegisterData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleRegisterSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
    if (registerData.password !== registerData.confirmPassword) {
      setError('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ–π
    if (!registerData.name || !registerData.email || !registerData.password) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è
    if (registerData.password.length < 6) {
      setError('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
      return;
    }
    
    setIsLoading(true);
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –Ω–∞:', `${API_BASE_URL}/auth/register`);
      console.log('–î–∞–Ω–Ω—ã–µ:', {
        name: registerData.name,
        email: registerData.email,
        password: '***'
      });
      
      const response = await axios.post(`${API_BASE_URL}/auth/register`, {
        name: registerData.name,
        email: registerData.email,
        password: registerData.password,
        user_avatar: `https://i.pravatar.cc/150?u=${registerData.name}`, // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤–∞—Ç–∞—Ä
        profile_info: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${registerData.name}`
      }, {
        headers: {
          'Content-Type': 'application/json',
        },
        timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });

      if (response.data.success) {
        setSuccess('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.');
        
        // –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        console.group('üöÄ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø');
        console.log('üìÖ –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', new Date().toLocaleString('ru-RU'));
        console.log('üë§ –ò–º—è:', registerData.name);
        console.log('üë§ Username (—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω):', response.data.user.username);
        console.log('üìß Email:', registerData.email);
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å:', '–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
        console.log('üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', response.data.user.id);
        console.log('üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å,', registerData.name + '!');
        console.groupEnd();
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          handleCloseModal();
        }, 2000);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      
      if (error.response?.data?.message) {
        setError(error.response.data.message);
      } else if (error.code === 'ECONNREFUSED') {
        setError('–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.');
      } else {
        setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="Regcont">
      <div className="Reg-box">
        <div className="login-header">
          <div className="login-logo">
            <img src={logoImage} alt="logo" />
          </div>
          <div className="login-logotext">
            <h1>Space-Point</h1>
            <p>–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è —Å–µ—Ç—å</p>
          </div>
        </div>
        <div className="login-content">
          <form onSubmit={handleLoginSubmit}>
            {error && !isRegisterModalOpen && (
              <div className="error-message" style={{ marginBottom: '16px' }}>
                ‚ùå {error}
              </div>
            )}
            
            <div className="login-input">
              <input 
                type="text" 
                name="login"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω..." 
                value={loginData.login}
                onChange={handleLoginInputChange}
                disabled={isLoading}
                required
              />
              <input 
                type="password" 
                name="password"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å..." 
                value={loginData.password}
                onChange={handleLoginInputChange}
                disabled={isLoading}
                required
              />
            </div>
            <button 
              type="submit" 
              className="login-btn"
              disabled={isLoading}
            >
              {isLoading ? '–í—Ö–æ–¥...' : '–í–æ–π—Ç–∏'}
            </button>
          </form>
          <button className="login-reg" onClick={handleRegisterClick}>
            –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
          </button>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
      {isRegisterModalOpen && (
        <div className="modal-overlay" onClick={handleCloseModal}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h2>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>
              <button className="modal-close" onClick={handleCloseModal}>
                √ó
              </button>
            </div>
            <form className="register-form" onSubmit={handleRegisterSubmit}>
              {error && (
                <div className="error-message">
                  ‚ùå {error}
                </div>
              )}
              {success && (
                <div className="success-message">
                  ‚úÖ {success}
                </div>
              )}
              
              <div className="form-group">
                <input
                  type="text"
                  name="name"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è..."
                  value={registerData.name}
                  onChange={handleRegisterInputChange}
                  disabled={isLoading}
                  required
                />
              </div>

              <div className="form-group">
                <input
                  type="email"
                  name="email"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ email..."
                  value={registerData.email}
                  onChange={handleRegisterInputChange}
                  disabled={isLoading}
                  required
                />
              </div>
              <div className="form-group">
                <input
                  type="password"
                  name="password"
                  placeholder="–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤)..."
                  value={registerData.password}
                  onChange={handleRegisterInputChange}
                  disabled={isLoading}
                  required
                />
              </div>
              <div className="form-group">
                <input
                  type="password"
                  name="confirmPassword"
                  placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å..."
                  value={registerData.confirmPassword}
                  onChange={handleRegisterInputChange}
                  disabled={isLoading}
                  required
                />
              </div>
              <button 
                type="submit" 
                className="register-submit-btn"
                disabled={isLoading}
              >
                {isLoading ? '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
              </button>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}

export default Regcont;